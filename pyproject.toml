# https://python-poetry.org/docs/pyproject/
[tool.poetry]
name = "my-package"
version = "0.1.0"
description = "..."
authors = ["Ben Felder <...@...>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "*", from = "src", to = "my_package" }]

[tool.poetry.dependencies]
python = "^3.12"
typer = "*"
loguru = "*"
pydantic = "*"
pydantic-settings = "*"
httpx = "*"

[tool.poetry.group.dev.dependencies]
ruff = "*"
pyright = "*"
deptry = "*"
vulture = "*"
commitizen = "*"

[tool.poetry.group.test.dependencies]
pytest = "*"
pytest-cov = "*"
pytest-xdist = "*"

[tool.poetry.scripts]
cli = "src.__main__:cli"

[tool.ruff]
# https://docs.astral.sh/ruff/
src = ["src"]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
task-tags = ["TODO", "FIXME", "XXX", "NOTE", "HACK"]
extend-select = [
    # way to see conflicting rules?
    "C901",  # mccabe
    "N",     # pep8-naming
    "D",     # pydocstyle
    "UP",    # pyupgrade
    "ASYNC", # flake8-async
    "S",     # flake8-bandit
    "BLE",   # flake8-blind-except
    "FBT",   # flake8-boolean-trap
    "B",     # flake8-bugbear
    "A",     # flake8-builtins
    "COM",   # flake8-commas
    "C4",    # flake8-comprehensions
    "DTZ",   # flake8-datetimez
    "T10",   # flake8-debugger
    "ISC",   # flake8-implicit-str-concat
    "ICN",   # flake8-import-conventions
    "INP",   # flake8-no-pep420
    "PIE",   # flake8-pie
    "T20",   # flake8-print
    "PT",    # flake8-pytest-style
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SIM",   # flake8-simplify
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "ERA",   # flake8-eradicate
    "PL",    # pylint
    "TRY",   # tryceratops
    "PERF",  # perflint
    "FURB",  # refurb
    "DOC",   # pydoclint
    "FAST",  # FastAPI
    "RUF",   # ruff-specific rules
    "NPY",   # NumPY
    "PGH",   # pygrep-hooks
    "PD",    # pandas-vet
    "INT",   # flake8-gettext
    "PYI",   # flake8-pyi
    "G",     # flake8-logging-format
    "LOG",   # flake8-logging
    "FA",    # flake8-future-annotations
]
ignore = [
    # pydocstyle 'undocumented'
    "D100",
    "D101",
    # "D102",
    # "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "PTH123", # builtin-open
    "PT004",  # leading underscore for None returners
    # stylistic rules
    # https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
    "W191",
    "E111",
    "E114",
    "E117",
    "D206",
    "D300",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "COM812",
    "COM819",
    "ISC001",
    "ISC002",
    "TRY003", # restricts even inbuilt exception types
]

[tool.ruff.lint.extend-per-file-ignores]
"test*" = [
    "ARG001", # mock arguments are unused
    "D103",   # test functions do not need docstring
    "S101",   # assert statements are fine in tests
    "SLF001", # private member access ok in tests
]

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.isort]
# https://beta.ruff.rs/docs/settings/#isort
# https://beta.ruff.rs/docs/faq/#how-does-ruffs-import-sorting-compare-to-isort
lines-after-imports = 2
known-first-party = ["src", "tests"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pyright]
# https://microsoft.github.io/pyright/#/configuration
typeCheckingMode = "basic"

[tool.deptry]
# https://deptry.com/usage/
known_first_party = ["src", "tests"]

[tool.commitizen]
# https://commitizen-tools.github.io/commitizen/config/
name = "cz_conventional_commits"
tag_format = "$version"
version_scheme = "pep440"
version_provider = "poetry"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
